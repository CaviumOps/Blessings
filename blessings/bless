#!/usr/bin/env python

import copy
import sys
import Tkinter as tk
import tkMessageBox as box
import zlib

# My password dialog
from password import password_dialog

# To change passwords, use the password_hash(new_password) to get the hash then
# paste it here.
te_manger_hash = 197657346
pe_manager_hash = 150209158
engineer_hash = 190841556

blessed_file   = "blessings/blessed.txt"
blessings_file = "blessings/blessings.db"

def error(s):
    print s
    box.showerror("ERROR", s)
    exit(255)

def try_open(filename):
    try:
        f = open(filename)
    except:
        error("Failed to open " + filename)
    return f

def read_blessings(f):
    pairs = []
    for l in f.readlines():
        words = l.split()
        if len(words) == 2:
            pairs.append((words[0], words[1]))
    return pairs

def first(t):
    return t[0]

def difference(a, b):
    r = []
    for x in a:
        if x not in b:
            r.append(x)
    return r

def verify(blessings):
    r = []
    for (file, crc) in blessings:
        contents = readfile(file)
        if crc != ("%08x" % password_hash(contents)):
            print "%s %s %s" % (file, str(crc), str(password_hash(contents)))
            r.append(file)
    return r

def enumerate(l):
    r = []
    i = 0
    for x in l:
        r.append((i,x))
        i = i + 1
    return r

class Ask(tk.Toplevel):
    def __init__(self, question, answers):
        tk.Toplevel.__init__(self)

        self.QUESTION = tk.Message(self, width = "40c")
        self.QUESTION["text"] = question
        self.QUESTION.pack({"side": "top"})

        self.ANSWERS = tk.Frame()
        self.ANSWERS.pack({"side": "bottom"})

        self.protocol("WM_DELETE_WINDOW", self.quit)

        self.ANSWERS.ANS=[]
        for (i,(ans, act)) in enumerate(answers):
            print "appending button", i, ans, act.__name__
            self.ANSWERS.ANS.append(tk.Button(self))
            self.ANSWERS.ANS[i]["text"] = ans
            # self.ANS[i]["fg"] = "red"
            self.ANSWERS.ANS[i]["command"] = self.mk_act_and_quit(act)
            self.ANSWERS.ANS[i].pack({"side": "top"})

    def mk_act_and_quit(self, act):
        def f():
            print "action", act.__name__
            act(self)
            self.quit()
        return f

def make_an_exception(parent):
    global global_blessed

    if password_dialog(parent, "Engineer password:", engineer_hash):
        global_blessed = True


def ask(question, answers):
    return Ask(question, answers).mainloop()

def readfile(filename):
    try:
        f = open(filename)
        contents = f.read()
        f.close()
        return contents
    except:
        error("Failed to read: " + filename)

def last_writes(parent, files):
    global global_blessed

    if not (password_dialog(parent, "TE manager password:", te_manger_hash)
        and password_dialog(parent, "PE manager password:", pe_manager_hash)):
        return

    try:
        w = open(blessings_file, "w")
    except:
        error("Failed to write " + blessings_file)

    for f in files:
        contents = readfile(f)
        w.write(f + " " + "%08x" % password_hash(contents) + "\n")

    w.close()

    global_blessed = True

# Always returns true if it returns
def verify_password(name, pwhash):

    verified = False

    while not verified:
        print "Please enter password for %s: " % name
        pw = sys.stdin.readline().lstrip().rstrip()
        if check_password(pw, pwhash):
            verified = True
        else:
            print "Password not accepted"

    return True


def ready_to_bless(unholy, tampered, allfiles):
    msg = ""
    if unholy:
        msg = (msg +
                "These files are supposed to be blessed but aren't:\n  " +
                "\n  ".join(unholy) + "\n")

    if tampered:
        msg = (msg +
                "These files contain unsanctioned modifications:\n  " +
                "\n  ".join(tampered) + "\n")

    msg = (msg +
            "If you've completed QA, go ahead and bless them.\n" +
            "Otherwise, make an exception for this session.\n"
            "If you're running production, please abort or you will be cursed.")

    return ask(msg,
        [ ("Bless me for I have completed QA",
            lambda parent: last_writes(parent, allfiles)),
          ("I'm a TE - make an exception for this session",
            make_an_exception),
          ("I'm running production - abort! abort!",
            noblessing)
        ])

def noblessing(parent):
    global global_blessed
    global_blessed = False

def password_hash(pw):
    return 0xFFFFFFFF & zlib.crc32(pw)

def check_password(candidate, pwhash):
    return password_hash(candidate) == pwhash

def check_blessings():
    global global_blessed

    blessed = try_open(blessed_file).read().split()

    try:
        f = open(blessings_file)
    except:
        blessings = ""
    else:
        blessings = read_blessings(f)
        f.close()

    unholy = difference(blessed, map(first, blessings))
    tampered = verify(blessings)

    if len(unholy) or len(tampered):
        ready_to_bless(unholy, tampered, blessed)
    else:
        global_blessed = True

# A status of 0 means the program terminated normally and the testflow should continue
# Too bad I'm using a global variable for this

global_blessed = False

def exit(n):
    sys.exit(n)


if __name__ == "__main__":
    print "check_blessings ..."
    check_blessings()

    if global_blessed:
        exit(0)
    else:
        exit(255)
